
; ******** Source: scankeys.asm
     1                          ; scankeys.asm - Commodore 64 test/demo keyboard scan
     2                          ; Copyright (c) 2023, 2024, 2025 by David Van Wagner ALL RIGHTS RESERVED
     3                          ; MIT LICENSE
     4                          ; github.com/davervw
     5                          ; www.davevw.com
     6                          
     7                          CIAPRA=$dc00 ; CIA#1 Data Port Register A
     8                          CIAPRB=$dc01 ; CIA#1 Data Port Register B
     9                          CIDDRA=$dc02 ; CIA#1 Data Direction Register A (controls port A lines whether in[0]/out[1])
    10                          CIDDRB=$dc03 ; CIA#1 Data Direction Register B (controls port B lines whether in[0]/out[1])
    11                          
    12                          CHROUT=$ffd2 ; KERNAL character out
    13                          
    14                          videoram=$0400
    15                          colorram=$d800
    16                          color=$286 ; 646 decimal
    17                          zvideo=$fb
    18                          zcolor=$fd
    19                          clearscreen=147
    20                          scancode=$26
    21                          found=$27
    22                          savex=$28
    23                          keycounter=$ff
    24                          curkey=$cb
    25                          shiftstate=$28d
    26                          
    27                          *=$c000
    28  c000 20bbc1             	jsr getkbdmatrix
    29  c003 a9e5               	lda #<title
    30  c005 a2c1               	ldx #>title
    31  c007 20aac1             	jsr strout
    32  c00a 78                 	sei
    33  c00b a2ff               	ldx #$ff
    34  c00d 8e02dc             	stx CIDDRA ; set port A as 8 outputs
    35  c010 e8                 	inx
    36  c011 8e03dc             	stx CIDDRB ; set port B as 8 inputs
    37                          
    38  c014 a984               	lda #'D'-64+128 ; to screen code, and reverse
    39  c016 ac8602             	ldy color
    40  c019 8d0404             	sta videoram+4
    41  c01c 8c04d8             	sty colorram+4
    42  c01f 8da004             	sta videoram+160
    43  c022 8ca0d8             	sty colorram+160
    44  c025 a983               	lda #'C'-64+128
    45  c027 8d0504             	sta videoram+5
    46  c02a 8c05d8             	sty colorram+5
    47  c02d 8dc804             	sta videoram+200
    48  c030 8cc8d8             	sty colorram+200
    49  c033 a9b0               	lda #'0'+128
    50  c035 8d0604             	sta videoram+6
    51  c038 8c06d8             	sty colorram+6
    52  c03b 8df004             	sta videoram+240
    53  c03e 8cf0d8             	sty colorram+240
    54  c041 8d1805             	sta videoram+280
    55  c044 8c18d9             	sty colorram+280
    56  c047 a9b1               	lda #'1'+128
    57  c049 8d0704             	sta videoram+7
    58  c04c 8c07d8             	sty colorram+7
    59                          
    60  c04f a02a               	ldy #42 ; second screen row, third column for heading
    61  c051 a937               	lda #'7'
    62  c053 990004             -	sta videoram,y
    63  c056 48                 	pha
    64  c057 ad8602             	lda color
    65  c05a 9900d8             	sta colorram,y
    66  c05d c8                 	iny
    67  c05e 68                 	pla
    68  c05f 38                 	sec
    69  c060 e901               	sbc #1
    70  c062 c92f               	cmp #'0'-1 ; out of digits?
    71  c064 d0ed               	bne - ; branch if more digits
    72  c066 a230               	ldx #'0' ; row heading
    73  c068 ac8602             	ldy color
    74  c06b 8e5104             	stx videoram+81
    75  c06e 8c51d8             	sty colorram+81
    76  c071 e8                 	inx
    77  c072 8e7904             	stx videoram+121
    78  c075 8c79d8             	sty colorram+121
    79  c078 e8                 	inx
    80  c079 8ea104             	stx videoram+161
    81  c07c 8ca1d8             	sty colorram+161
    82  c07f e8                 	inx
    83  c080 8ec904             	stx videoram+201
    84  c083 8cc9d8             	sty colorram+201
    85  c086 e8                 	inx
    86  c087 8ef104             	stx videoram+241
    87  c08a 8cf1d8             	sty colorram+241
    88  c08d e8                 	inx
    89  c08e 8e1905             	stx videoram+281
    90  c091 8c19d9             	sty colorram+281
    91  c094 e8                 	inx
    92  c095 8e4105             	stx videoram+321
    93  c098 8c41d9             	sty colorram+321
    94  c09b e8                 	inx
    95  c09c 8e6905             	stx videoram+361
    96  c09f 8c69d9             	sty colorram+361
    97  c0a2 a952               --- lda #<(videoram+82)
    98  c0a4 85fb               	sta zvideo
    99  c0a6 85fd               	sta zcolor
   100  c0a8 a904               	lda #>(videoram+82)
   101  c0aa 85fc               	sta zvideo+1
   102  c0ac a9d8               	lda #>(colorram+82)
   103  c0ae 85fe               	sta zcolor+1
   104                          
   105                          	; initialize scancode variables
   106  c0b0 a93f               	lda #63
   107  c0b2 85ff               	sta keycounter ; count for scan codes
   108  c0b4 8527               	sta found
   109  c0b6 a940               	lda #64
   110  c0b8 8526               	sta scancode
   111                          
   112  c0ba a97f               	lda #$7F ; start with bit 7 grounded
   113  c0bc a000               --	ldy #0 ; count number of scanlines
   114  c0be 8d00dc             	sta CIAPRA ; output keyboard scanline
   115  c0c1 ae01dc             	ldx CIAPRB ; read keys pressed
   116  c0c4 48                 	pha ; save scanline
   117  c0c5 8a                 	txa
   118  c0c6 0a                 -	asl ; shift keys into carry one by one
   119  c0c7 48                 	pha ; save keys
   120  c0c8 a920               	lda #' ' ; not pressed
   121  c0ca b00a               	bcs +
   122                          	; bit found
   123                          	; bmi alreadyfound
   124  c0cc a5ff               	lda keycounter
   125  c0ce 8526               	sta scancode
   126  c0d0 38                 	sec
   127  c0d1 6627               	ror found ; mark found
   128                          alreadyfound:	
   129  c0d3 205cc1             	jsr lookupkey
   130  c0d6 91fb               +	sta (zvideo),y ; videoram pointer for key
   131  c0d8 ad8602             	lda color
   132  c0db 91fd               	sta (zcolor),y ; colorram pointer for key
   133  c0dd 68                 	pla ; restore keys
   134  c0de c6ff               	dec keycounter
   135  c0e0 c8                 	iny
   136  c0e1 c008               	cpy #8 ; completed the row?
   137  c0e3 d0e1               	bne - ; branch if more on row
   138  c0e5 68                 	pla ; restore scanline
   139  c0e6 38                 	sec
   140  c0e7 6a                 	ror ; inject bit while shifting
   141  c0e8 c9ff               	cmp #$ff ; check for all bits set
   142  c0ea f01b               	beq ++ ; branch if done
   143  c0ec 48                 	pha ; save scanline
   144  c0ed 18                 	clc
   145  c0ee a5fb               	lda zvideo
   146  c0f0 6928               	adc #40 ; columns on screen, advance to next line
   147  c0f2 85fb               	sta zvideo
   148  c0f4 9002               	bcc +
   149  c0f6 e6fc               	inc zvideo+1
   150  c0f8 18                 +	clc
   151  c0f9 a5fd               	lda zcolor
   152  c0fb 6928               	adc #40 ; columns on screen, advance to next line
   153  c0fd 85fd               	sta zcolor
   154  c0ff 9002               	bcc +
   155  c101 e6fe               	inc zcolor+1
   156  c103 68                 +	pla ; restore scanline
   157  c104 4cbcc0             	jmp --
   158  c107 a526               ++	lda scancode
   159  c109 4a                 	lsr
   160  c10a 4a                 	lsr
   161  c10b 4a                 	lsr
   162  c10c 4a                 	lsr
   163  c10d 09b0               	ora #$B0 ; reverse zero
   164  c10f c9ba               	cmp #$BA ; out of bounds for numeric?
   165  c111 9002               	bcc + ; branch if okay
   166  c113 69c6               	adc #$C6 ; convert to A..F
   167  c115 8dbb05             +   sta videoram+443
   168  c118 ad8602             	lda color	
   169  c11b 8dbad9             	sta colorram+442
   170  c11e 8dbbd9             	sta colorram+443
   171  c121 8dbcd9             	sta colorram+444
   172  c124 a924               	lda #'$'
   173  c126 8dba05             	sta videoram+442
   174  c129 a526               	lda scancode
   175  c12b 290f               	and #$0F
   176  c12d 09b0               	ora #$B0
   177  c12f c9ba               	cmp #$BA
   178  c131 9002               	bcc +
   179  c133 69c6               	adc #$C6
   180  c135 8dbc05             +	sta videoram+444
   181  c138 a923               	lda #'#'
   182  c13a 8dbe05             	sta videoram+446
   183  c13d a526               	lda scancode
   184  c13f 209ec1             	jsr div10
   185  c142 09b0               	ora #$B0 ; convert to inverse digit
   186  c144 8dc005             	sta videoram+448
   187  c147 8a                 	txa
   188  c148 09b0               	ora #$B0 ; convert to inverse digit
   189  c14a 8dbf05             	sta videoram+447
   190  c14d ac8602             	ldy color
   191  c150 8cbed9             	sty colorram+446
   192  c153 8cbfd9             	sty colorram+447
   193  c156 8cc0d9             	sty colorram+448
   194  c159 4ca2c0             	jmp ---
   195                          lookupkey:
   196  c15c 8628               	stx savex
   197  c15e a6ff               	ldx keycounter
   198                          kbdmatrix=*+1
   199  c160 bd81eb             	lda $eb81, x
   200  c163 c920               	cmp #$20
   201  c165 b008               	bcs +
   202  c167 c901               	cmp #1
   203  c169 d004               	bne +
   204  c16b a99e               	lda #$9E ; Reverse up arrow
   205  c16d d02c               	bne ++
   206  c16f c902               +	cmp #2
   207  c171 d004               	bne +
   208  c173 a9bd               	lda #'='+128
   209  c175 d024               	bne ++
   210  c177 c904               +	cmp #4
   211  c179 d004               	bne +
   212  c17b a95f               	lda #$5F ; upper right triangle shape
   213  c17d d01c               	bne ++
   214  c17f c920               +	cmp #$20
   215  c181 d004               	bne +
   216  c183 a9a0               	lda #$A0
   217  c185 d014               	bne ++
   218  c187 b004               +	bcs +
   219  c189 0980               	ora #$80
   220  c18b d00e               	bne ++
   221  c18d c980               +	cmp #$80
   222  c18f 9004               	bcc +
   223  c191 0940               	ora #$40
   224  c193 d006               	bne ++
   225  c195 c940               +	cmp #$40
   226  c197 9002               	bcc ++
   227  c199 4940               	eor #$40	
   228  c19b a628               ++	ldx savex
   229  c19d 60                 	rts
   230                          div10: ; take A and divide by 10, remainder in A, answer in X
   231  c19e a200               	ldx #0
   232  c1a0 c90a               -	cmp #10
   233  c1a2 9005               	bcc +
   234  c1a4 e90a               	sbc #10
   235  c1a6 e8                 	inx
   236  c1a7 d0f7               	bne -
   237  c1a9 60                 +	rts
   238                          strout:
   239  c1aa 85fb               	sta $fb
   240  c1ac 86fc               	stx $fc
   241  c1ae a000               	ldy #0
   242  c1b0 b1fb               -	lda ($fb),y
   243  c1b2 f006               	beq +
   244  c1b4 20d2ff             	jsr CHROUT
   245  c1b7 c8                 	iny
   246  c1b8 d0f6               	bne -
   247  c1ba 60                 +	rts
   248                          getkbdmatrix:
   249  c1bb 78                 	sei
   250  c1bc ad8d02             	lda shiftstate
   251  c1bf 48                 	pha
   252  c1c0 a5cb               	lda curkey
   253  c1c2 48                 	pha
   254  c1c3 a900               	lda #0
   255  c1c5 8d8d02             	sta shiftstate
   256  c1c8 a940               	lda #$40
   257  c1ca 85cb               	sta curkey
   258  c1cc 20e2c1             	jsr getmap
   259  c1cf a6f5               	ldx $f5
   260  c1d1 a4f6               	ldy $f6
   261  c1d3 8e61c1             	stx kbdmatrix
   262  c1d6 8c62c1             	sty kbdmatrix+1
   263  c1d9 68                 	pla
   264  c1da 85cb               	sta curkey
   265  c1dc 68                 	pla
   266  c1dd 8d8d02             	sta shiftstate
   267  c1e0 58                 	cli
   268  c1e1 60                 	rts
   269                          getmap:
   270  c1e2 6c8f02             	jmp ($028f)
   271                          
   272                          title: 
   273  c1e5 93                 	!byte 147
   274  c1e6 1111111111111111...	!byte 17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
   275  c1fd 125343414e4b4559...	!text 18,"SCANKEYS (C) 2025     GITHUB.COM/DAVERVW"
   276  c226 9d9d1112209d9420...	!text 157,157,17,18,32,157,148,32,157,145,145,13,17
   277  c233 1242592044415649...	!text 18,"BY DAVID R. VAN WAGNER       DAVEVW.COM"
